MACROS

Unidade Pré processador - antes do código ser comopilado elé e pré-processado pelo compilador;
No c++ contém elementos sintátitos pelo qual possa controlar diversos comportamentos da aplicação quando utilizado instruções pelo pré-processamento;
- instruções: # que modificam o texto do código fonte antes da compilação;

MACROS: legibilidade e facilidade na manutenção;
 - diretiva #define : declarar um valor constante para o código
#define GRANDE 1024
int vetor[GRANDE];

Resultad: int vetor[1024];

e/ou

#define QUADRADO(x) ((x)*(x)) 

CUIDADO= 
#define QUADRADO(x) (x*x)
var = QUADRADO(3+4);
Isso se torna (3+4*3+4), o que resultará em 19, em vez de 49.
* Os parênteses ajudam a evitar problemas potenciais relativos a precedência de
operadores.

Macros podem ter mais de um parâmetro.
#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define MIN(x,y) ((x) < (y) ? (x) : (y))

Usamos o operador ternário condicional para descobrir o maior, e o menor, entre
dois números.
Temos dois parâmetros, x e y sendo utilizados na função macro.
#define MAX(x,y) ((x) > (y) ? (x) : (y))
var = MAX(73/4*1.13,18.9);
O código acima irá substituir todas as ocorrências de MAX(73/4*1.13,18.9) por
20.34.
Mas tenham cuidado com espaços em branco. O pré-processador não é tão
tolerante com espaços vazios.



Macros podem ser usadas para gerar código repetitivo ou para criar construções
específicas.
#include <iostream>
using namespace std;
#define DECLARACAO_GETTER_SETTER(type, var) \
type get_##var() const { return var; } \
void set_##var(type valor) { var = valor; }
class ClasseExemplo {
private:
int minhaVariavel;
public:
DECLARACAO_GETTER_SETTER(int, minhaVariavel)
};
int main() {
ClasseExemplo m;
m.set_minhaVariavel(12);
cout << m.get_minhaVariavel();
}

--------------------------------------------------------------------------------

TEMPLATES

São ferramentas que permite criar códigos genéricos para serem trabalhados com diversos tipos de dados, sendo eles um modelo base para classes ou funções;

Sintaxe de Templates para Funções:
template <typename Tipo>
	Tipo minhaFuncao(Tipo parametro) {
		// Código da função
	}

Sintaxe de Templates para Classes:
template <typename Tipo>
	class MinhaClasse {
		// Código da Classe
	};
Para instanciar um objeto da classe usando o Template:
MinhaClasse <TIPO> obj;

Mútiplos parâmetros.
template <typename R, typename S, typename T, typename U>
	class MinhaClasse {
		// Código da Classe
	};
Para instanciar um objeto da classe:
MinhaClasse <TIPO_R,TIPO_S,TIPO_T,TIPO_U> obj;

CODIGO: 
#include <iostream>
using namespace std;
template <typename TipoElemento, int tamanhoPilha>
class Pilha {
private:
TipoElemento elementos[tamanhoPilha];
int topo;
public:
Pilha() : topo(−1) {}
bool push(TipoElemento valor) {
if(topo < tamanhoPilha − 1) {
elementos[++topo] = valor;
return true; }
else {
cerr << "Erro: Stack Overflow, não é possível adicionar mais elementos.\n";
return false; }
}
TipoElemento pop() {
if (topo >= 0)
return elementos[topo−−];
else {
cerr << "Erro: Stack Underflow, não é possível remover elementos.\n";
return 0; }
}
};
int main() {
Pilha<int, 200> stack;
stack.push(50);
cout << stack.pop();
return 0;
}



Templates pode possuir valores padrões:
Templates podem possuir valores padrão para os parâmetros.
#include <iostream>
using namespace std;
template <typename Tipo = int, int ValorPadrao = 26>
class MinhaClasse {
private:
Tipo var;
public:
MinhaClasse(Tipo valor = ValorPadrao):var(valor) {}
void imprimirVar() {
cout << "Var: " << var << endl;
}
};
int main() {
MinhaClasse<int,36> obj1;
MinhaClasse<> obj2;
obj1.imprimirVar(); // 36
obj2.imprimirVar(); // 26
return 0;
}
Aqui temos um valor padrão para o tipo do primeiro parâmetro e para o
valor do segundo parâmetro.



Templates de especialização: Podem ser instaciados (anteriormente) e especializados (vamos ver adiante)

** Instaciacação de templates: 