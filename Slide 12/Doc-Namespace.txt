**Definição = são regiões declarativas para serem fornecidos a um escopo para os tipos de indentificadores (variavavéis, funções, classes);
**Utilidade = evitar conflitos por nomes, legibilidade e organização do código;
** 3 Formas de utilizar:
	1. Qualificação pelo identificador (::)
		Ex: NomeNamespace::NomeClasse obj;
		    obj.funcao();
	2. utilizando a diretiva using + qualificação (::)
		Ex: using NomeNamespace::NomeClasse;
		    NomeClasse obj;
 		    obj.funcao();
	2. utilizando a diretiva using para todos os namespaces
		Ex: using namespace NomeNamespace
		    NomeClasse obj;
 		    obj.funcao();
** Tipos de Namespace:
- Namespaces Globais:
Se não forem declarados explicitamente, utiliza-se o operador de resolução de escopo (::) e sem o nome antes dos identificadores (::var), mas senão os namespaces pode ser globais implicitamente (names::var). 
- Namespaces Aninhados:
names1::names2::var;
Aninhamento possui acesso não qualificado ao membro de seus pais (função filho pode acessar a função pai) - CORRETO
Vs
Aninhamento dos membros-pai não possui qaulificação para os namespaces aninhados (função pai acessar a função filho) - ERRADO
*Solução: inverter as funções e aninhar os namespaces juntos;

- Namespaces Embutidos:
São realizados as operações como membros de namespaces pai e garante que o pai possua acesso aos membros dos namespaces sem qualificações;
E são declarados com o INLINE (inline namespace nomenamesp{})

namespace primeiroNamespace {
	inline namespace segundoNamespace {
	int umaVariavel;
		void outraFuncao() {...}
	}
		void umaFuncao() {
			return outraFuncao();
		}
}

- Namespaces Anônimos: 
São namespaces sem nomes, a fim de agrupar declarações em um espaço para se evitar conflitos, ou seja, se preserva a localidade do código e no seu int main possui acesso;

- Renomeando Namespaces: 
Evita-se colisões de nomes curtos e dificuldades para nomes longos;
Criase se apelidos (aliases), como: 
namespaces aliases = nomeeeee;
aliases::var;
*Criar nomes alternativos - Legibilidade e Flexibilidade* 